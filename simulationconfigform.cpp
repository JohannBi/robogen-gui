#include "simulationconfigform.h"
#include "ui_simulationconfigform.h"

#include <QComboBox>
#include <QSpinBox>
#include <QDoubleSpinBox>
#include <QFile>
#include <QTextStream>
#include <QDebug>
#include <QMessageBox>

SimulationConfigForm::SimulationConfigForm(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::SimulationConfigForm)
{
    ui->setupUi(this);
}

SimulationConfigForm::~SimulationConfigForm()
{
    delete ui;
}

void SimulationConfigForm::saveAll()
{
    if(current_config) {
        for(QComboBox *child: findChildren<QComboBox*>()) {
            current_config->combo_map[child->objectName()] = child->currentText();
        }

        for(QSpinBox* child: findChildren<QSpinBox*>()) {
            current_config->spin_map[child->objectName()] = child->value();
        }

        for(QDoubleSpinBox* child: findChildren<QDoubleSpinBox*>()) {
            current_config->double_spin_map[child->objectName()] = child->value();
        }

        for(QCheckBox* child: findChildren<QCheckBox*>()) {
            current_config->bool_map[child->objectName()] = child->isChecked();
        }
    }
}

void SimulationConfigForm::loadAll()
{
    if(current_config) {
        for(auto& pair: current_config->combo_map) {
            QComboBox* child = findChild<QComboBox*>(pair.first);
            child->setCurrentText(pair.second);
        }

        for(auto& pair: current_config->spin_map) {
            QSpinBox* child = findChild<QSpinBox*>(pair.first);
            child->setValue(pair.second);
        }

        for(auto& pair: current_config->double_spin_map) {
            QDoubleSpinBox* child = findChild<QDoubleSpinBox*>(pair.first);
            child->setValue(pair.second);
        }

        for(auto& pair: current_config->bool_map) {
            QCheckBox* child = findChild<QCheckBox*>(pair.first);
            child->setChecked(pair.second);
        }
    }
}

void SimulationConfigForm::writeSimulation(const QString &project_path)
{
    QString filename = project_path + "/tmp/sim.txt";

    QFile file(filename);
    if ( file.open(QIODevice::ReadWrite | QIODevice::Truncate | QIODevice::Text) )
    {
        QTextStream stream( &file );
        stream << "# GENERATED BY ROBOGEN GUI" << endl;
        if(ui->check_customscenario->isChecked())
            stream <<"scenario=" << ui->line_scenario->text() << endl;
        else
            stream <<"scenario=" << ui->combo_scenario->currentText() << endl;
        stream <<"timeStep=" << ui->dspin_timestep->value() << endl;
        stream <<"actuationFrequency="<< ui->dspin_actuationfrequency->value() << endl;
        stream <<"nTimeSteps="<< ui->spin_ntimesteps->value() << endl;
        stream <<"terrainType="<< ui->combo_terraintype->currentText() << endl;
        stream <<"terrainLength="<< ui->dspin_terrainlength->value() << endl;
        stream <<"terrainWidth="<< ui->dspin_terrainwidth->value() << endl;
        stream <<"terrainFriction="<< ui->dspin_terrainfriction->value() << endl;
        stream <<"sensorNoiseLevel="<< ui->dspin_sensornoiselevel->value() << endl;
        stream <<"motorNoiseLevel="<< ui->dspin_motornoiselevel->value() << endl;
        stream <<"capAcceleration="<< (ui->check_capacceleration->isChecked() ? "true": "false") << endl;
        if(ui->line_obstacles->text().length() > 0) {
            stream <<"obstaclesConfigFile="<< ui->line_obstacles->text() << endl;
        }
    }
    else
    {
        qDebug() << "FAILED TO SAVE SIMULATION TO: " << filename << endl;
        QMessageBox::critical(this, "Error", "Failed to save simulation config to: " + filename);
    }
}
