#include "evolutionconfigform.h"
#include "ui_evolutionconfigform.h"
#include <QDebug>
#include <QCheckBox>
#include <QFile>
#include <QMessageBox>

EvolutionConfigForm::EvolutionConfigForm(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::EvolutionConfigForm)
{
    ui->setupUi(this);

    for(auto& child: findChildren<QComboBox*>()) {
        connect(child, SIGNAL(currentTextChanged(QString)), this, SLOT(onComboChanged(QString)));
    }
}

EvolutionConfigForm::~EvolutionConfigForm()
{
    delete ui;
}

void EvolutionConfigForm::saveAll()
{
    if(current_config) {
        for(QComboBox *child: findChildren<QComboBox*>()) {
            current_config->combo_map[child->objectName()] = child->currentText();
        }

        for(QSpinBox* child: findChildren<QSpinBox*>()) {
            current_config->spin_map[child->objectName()] = child->value();
        }

        for(QDoubleSpinBox* child: findChildren<QDoubleSpinBox*>()) {
            current_config->double_spin_map[child->objectName()] = child->value();
        }

        for(QCheckBox* child: findChildren<QCheckBox*>()) {
            current_config->bool_map[child->objectName()] = child->isChecked();
        }
    }
}

void EvolutionConfigForm::loadAll()
{
    if(current_config) {
        for(auto& pair: current_config->combo_map) {
            QComboBox* child = findChild<QComboBox*>(pair.first);
            child->setCurrentText(pair.second);
        }

        for(auto& pair: current_config->spin_map) {
            QSpinBox* child = findChild<QSpinBox*>(pair.first);
            child->setValue(pair.second);
        }

        for(auto& pair: current_config->double_spin_map) {
            QDoubleSpinBox* child = findChild<QDoubleSpinBox*>(pair.first);
            child->setValue(pair.second);
        }

        for(auto& pair: current_config->bool_map) {
            QCheckBox* child = findChild<QCheckBox*>(pair.first);
            child->setChecked(pair.second);
        }
    }
}

void EvolutionConfigForm::writeEvolution(const QString &project_path, int n_threads)
{
    QString filename = project_path + "/tmp/evo.txt";

    QFile file(filename);
    if ( file.open(QIODevice::ReadWrite | QIODevice::Truncate | QIODevice::Text) )
    {
        QTextStream stream( &file );
        stream << "# GENERATED BY ROBOGEN GUI" << endl;
        stream <<"simulatorConfFile=" << project_path + "/tmp/sim.txt" << endl;
        stream <<"referenceRobotFile=" << project_path + "/tmp/robot.txt" << endl;
        stream <<"mu=" << ui->spin_mu->value() << endl;
        stream <<"lambda=" << ui->spin_lambda->value() << endl;
        stream <<"selection="<< ui->combo_selection->currentText() << endl;
        stream <<"replacement="<< ui->combo_replacement->currentText()<< endl;
        stream <<"tournamentSize="<< ui->spin_tournament->value() << endl;
        stream <<"numGenerations="<< ui->spin_generations->value() << endl;
        stream <<"evolutionMode="<< ui->combo_evolutionmode->currentText() << endl;
        stream <<"pBrainMutate="<< ui->dspin_pbrainmutate->value() << endl;
        stream <<"brainSigma="<< ui->dspin_brainsigma->value() << endl;
        stream <<"pBrainCrossover="<< ui->dspin_pbraincrossover->value() << endl;
        stream <<"addBodyPart="<< "All" << endl;                                        ///TODO: Add to config
        stream <<"pNodeInsert=" << ui->dspin_pnodeinsert->value() << endl;
        stream <<"pSubtreeRemove=" << ui->dspin_psubtreeremove->value() << endl;
        stream <<"pSubtreeDuplicate=" << ui->dspin_psubtreeduplicate->value() << endl;
        stream <<"pSubtreeSwap=" << ui->dspin_psubtreeswap->value() << endl;
        stream <<"pNodeRemove=" << ui->dspin_pnoderemove->value() << endl;
        stream <<"pParameterModify=" << ui->dspin_pparemetermodify->value() << endl;
        stream <<"brainBounds=-3:3" << endl;                                            ///TODO: Add to configurations
        stream <<"pAddHiddenNeuron=" << ui->dspin_paddhiddenneuron->value() << endl;
        stream <<"maxBodyParts=" << ui->spin_maxbodyparts->value() << endl;
        if(ui->combo_evolutionmode->currentText() == "full" && ui->combo_evolutionaryalgorithm->currentText() == "HyperNEAT") {
            stream <<"evolutionaryAlgorithm=" << "Basic" << endl;    // Basic, HyperNEAT
            qDebug() << "WARNING: HyperNEAT cannot be used with full evolutions, setting to Basic" << endl;
            QMessageBox::warning(this, "Warning", "HyperNEAT canno be used with full evolutions, using Basic");
        }
        else {
            stream <<"evolutionaryAlgorithm=" << ui->combo_evolutionaryalgorithm->currentText() << endl;    // Basic, HyperNEAT
        }

        for(int i = 0; i < n_threads; i++)
        {
            stream <<"socket=127.0.0.1:800"<<i+1<<endl;
        }
    }
    else
    {
        qDebug() << "FAILED TO SAVE EVOLUTION TO: " << filename << endl;
    }
}

int EvolutionConfigForm::getMaxGenerations()
{
    return ui->spin_generations->value();
}

void EvolutionConfigForm::onComboChanged(QString txt)
{
    if(current_config) {
        current_config->combo_map[sender()->objectName()] = txt;
        // qDebug() << sender() << " :" << txt;
    }
}
